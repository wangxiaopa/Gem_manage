# Generated by Django 3.1.3 on 2020-11-26 15:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('Gem_Manage_App', '0008_auto_20201126_2119'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('member_name', models.CharField(max_length=50)),
                ('tel', models.CharField(max_length=50)),
                ('legal_representative', models.CharField(max_length=50, verbose_name='法人代表')),
                ('license_number', models.CharField(max_length=50, verbose_name='执照号')),
                ('postal_code', models.CharField(max_length=6, verbose_name='邮政编码')),
                ('company_name', models.CharField(max_length=100, verbose_name='公司名')),
                ('company_address', models.CharField(max_length=200, verbose_name='公司地址')),
            ],
        ),
        migrations.CreateModel(
            name='MemberType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('member_type', models.CharField(max_length=20)),
                ('status', models.BooleanField(verbose_name='会员类型状态')),
                ('describe', models.TextField(blank=True, verbose_name='会员类型介绍')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('module_name', models.CharField(max_length=20, verbose_name='模块名')),
            ],
        ),
        migrations.CreateModel(
            name='Preinstall',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[(1, '放大观察'), (2, '鉴定结果'), (3, '其它')], default=1, max_length=10)),
                ('preinstall_value', models.CharField(max_length=50, verbose_name='预设值')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('identification_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='检测批号')),
                ('sample_status', models.CharField(max_length=20, verbose_name='收样状态')),
                ('basket_id', models.CharField(max_length=10, verbose_name='框号')),
                ('finish_date', models.DateTimeField()),
                ('start_date', models.DateTimeField()),
                ('identification_cost', models.CharField(max_length=10, verbose_name='鉴定费用')),
                ('payment_state', models.CharField(choices=[('active', '是'), ('non_active', '否')], default='non_active', max_length=10, verbose_name='是否付款')),
            ],
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('sample_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('sample_type', models.CharField(choices=[(1, '大卡'), (2, '玉石'), (3, '钻石'), (4, '宝石'), (5, '小卡'), (6, '大报告')], default=1, max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='SingleSample',
            fields=[
                ('gemstone_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='编号')),
                ('verification_code', models.CharField(max_length=10, verbose_name='验证码')),
                ('single_sample_name', models.CharField(max_length=20, verbose_name='样品名称')),
                ('require', models.CharField(blank=True, max_length=50, verbose_name='检测要求')),
                ('status', models.CharField(blank=True, max_length=50, verbose_name='样品状况')),
                ('identification_result', models.CharField(max_length=50, null=True, verbose_name='鉴定结果')),
                ('gemstone_appearance', models.FloatField(max_length=20, null=True, verbose_name='外观')),
                ('gemstone_mass', models.FloatField(max_length=100000, null=True, verbose_name='总质量')),
                ('gemstone_density', models.FloatField(max_length=1000, null=True, verbose_name='密度')),
                ('refraction_index', models.FloatField(max_length=1000, null=True, verbose_name='折射率')),
                ('light_characteristc', models.FloatField(max_length=1000, null=True, verbose_name='光学特性')),
                ('observation_result', models.CharField(max_length=50, null=True, verbose_name='放大观察')),
                ('heavy_metal', models.CharField(max_length=50, null=True, verbose_name='重金属检测')),
                ('infrared', models.CharField(max_length=50, null=True, verbose_name='红外线检测')),
                ('cut', models.CharField(max_length=50, null=True, verbose_name='琢型')),
                ('color_level', models.FloatField(max_length=100, null=True, verbose_name='颜色级别')),
                ('Cleanliness_level', models.FloatField(max_length=100, null=True, verbose_name='纯净级别')),
                ('diamond_cut', models.CharField(max_length=50, null=True, verbose_name='切工')),
                ('others', models.CharField(max_length=50, null=True, verbose_name='其他')),
                ('remarks', models.TextField(null=True, verbose_name='备注')),
                ('image', models.ImageField(null=True, upload_to='', verbose_name='图片')),
                ('identification_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.sample')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('examine_staff', models.CharField(max_length=20, null=True)),
                ('gemstone_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.singlesample')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=20)),
                ('password', models.CharField(max_length=20, verbose_name='密码')),
                ('email', models.CharField(max_length=50, verbose_name='邮箱')),
                ('tel', models.CharField(max_length=30, verbose_name='电话号码')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('group_name', models.CharField(max_length=20)),
                ('group_describe', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserGroupStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('usergroup_status_values', models.CharField(max_length=30, verbose_name='用户任务状态')),
                ('user_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.usergroup')),
            ],
        ),
        migrations.CreateModel(
            name='UserPower',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_readable', models.CharField(choices=[('active', '是'), ('non_active', '否')], default='non_active', max_length=32, verbose_name='是否有浏览权限')),
                ('is_editable', models.CharField(choices=[('active', '是'), ('non_active', '否')], default='non_active', max_length=32, verbose_name='是否有编辑权限')),
                ('is_forbidden', models.CharField(choices=[('active', '是'), ('non_active', '否')], default='non_active', max_length=32, verbose_name='是否禁止访问')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.module')),
                ('user_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.usergroup')),
            ],
        ),
        migrations.RemoveField(
            model_name='sender',
            name='name',
        ),
        migrations.RemoveField(
            model_name='sender',
            name='postal_code',
        ),
        migrations.RemoveField(
            model_name='sender',
            name='tel',
        ),
        migrations.AddField(
            model_name='sender',
            name='sender_name',
            field=models.CharField(default='xxx', max_length=20, verbose_name='送样人姓名'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='sender',
            name='sender_postalcode',
            field=models.CharField(default='xxx', max_length=6, verbose_name='邮政编码'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='sender',
            name='sender_tel',
            field=models.CharField(default='xxx', max_length=20, verbose_name='送样人电话'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='sender',
            name='sender_company',
            field=models.CharField(max_length=50, verbose_name='送样人单位'),
        ),
        migrations.DeleteModel(
            name='Sample_recipt',
        ),
        migrations.AddField(
            model_name='user',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.usergroup'),
        ),
        migrations.AddField(
            model_name='task',
            name='identification_staff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.user'),
        ),
        migrations.AddField(
            model_name='task',
            name='identification_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.usergroupstatus'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sample_collectr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.user'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.sender'),
        ),
        migrations.AddField(
            model_name='preinstall',
            name='sample_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.sampletype'),
        ),
        migrations.AddField(
            model_name='member',
            name='member_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Gem_Manage_App.membertype'),
        ),
    ]
